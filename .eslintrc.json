{
  "env": { "browser": true, "es2021": true },
  "extends": [
    "eslint:recommended",
    "airbnb-base",
    "plugin:prettier/recommended"
  ],
  "parserOptions": { "ecmaVersion": "latest", "sourceType": "script" },
  "rules": {
    "camelcase": [
      "error",
      {
        "ignoreDestructuring": false,
        "ignoreGlobals": true,
        "ignoreImports": true,
        "properties": "always"
      }
    ],
    "curly": [
      // You're not supposed to use this rule with prettier, but in my experience
      // it works just fine with prettier-eslint and the following settings:
      "error",
      "multi-line",
      "consistent"
    ],
    "default-param-last": "off",
    "eqeqeq": ["error", "smart"],
    "indent": "off",
    "max-classes-per-file": "off",
    "max-len": "off",
    "new-cap": ["error", { "capIsNew": false }],
    "no-cond-assign": ["error", "except-parens"],
    "no-confusing-arrow": ["error", { "allowParens": false }],
    "no-console": "off",
    "no-empty": ["error", { "allowEmptyCatch": true }],
    "no-eval": "error",
    "no-fallthrough": [
      "error",
      {
        // The eslint rule doesn't allow for case-insensitive regex option.
        // The following pattern allows for a dash between "fall through" as
        // well as alternate spelling of "fall thru". The pattern also allows
        // for an optional "s" at the end of "fall" ("falls through").
        "commentPattern": "[Ff][Aa][Ll][Ll][Ss]?[\\s-]?([Tt][Hh][Rr][Oo][Uu][Gg][Hh]|[Tt][Hh][Rr][Uu])"
      }
    ],
    "no-implied-eval": "error",
    "no-param-reassign": "off",
    "no-promise-executor-return": "off",
    "no-restricted-syntax": ["error", "SequenceExpression"],
    "no-return-assign": "off",
    "no-shadow": "off",
    "no-underscore-dangle": "off",
    "no-unused-expressions": [
      "error",
      { "allowTaggedTemplates": true, "allowTernary": true }
    ],
    "no-unused-vars": ["error", { "args": "after-used", "vars": "local" }],
    "no-use-before-define": ["error", { "classes": false, "functions": false }],
    "prefer-destructuring": "off",
    "prettier/prettier": ["error", {}, { "usePrettierrc": true }],
    "quotes": [
      "error",
      "double",
      { "allowTemplateLiterals": false, "avoidEscape": true }
    ]
  }
}
